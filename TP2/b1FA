--------------------------------------------------------------------------------
-- User-annotated source: /root/orga_compu/TP2/benchmarks-tp2/benchmark-b1.S
--------------------------------------------------------------------------------
Ir  I1mr ILmr Dr  D1mr DLmr Dw D1mw DLmw 

-- line 10 ----------------------------------------
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	.text
  .    .    .   .    .    .  .    .    .  	.align	2
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	.globl	main
  .    .    .   .    .    .  .    .    .  	.ent	main
  .    .    .   .    .    .  .    .    .  main:
  .    .    .   .    .    .  .    .    .  	.set	noreorder
  3    1    1   0    0    0  0    0    0  	.cpload	t9
  .    .    .   .    .    .  .    .    .  	.set	nomacro
  1    0    0   0    0    0  0    0    0  	addiu	sp, sp, -24
  1    1    1   0    0    0  1    1    1  	sw	fp, 20(sp)
  1    0    0   0    0    0  0    0    0  	move	fp, sp
  1    0    0   0    0    0  1    1    1  	.cprestore	0
  .    .    .   .    .    .  .    .    .  
  2    1    1   1    1    1  0    0    0  	la	t0, aligned
  1    0    0   0    0    0  0    0    0  	li	t1, 100
  .    .    .   .    .    .  .    .    .  	.align	20
100    1    1 100   25   25  0    0    0  loop:	lw	t2, 0(t0)
100    0    0   0    0    0  0    0    0  	addu	t0, t0, 4
100    0    0   0    0    0  0    0    0  	subu	t1, t1, 1
100    0    0   0    0    0  0    0    0  	bnez	t1, loop
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	# Destruimos el stack frame antes de retornar de main().
  .    .    .   .    .    .  .    .    .  	#
100    1    1   0    0    0  0    0    0  	move	sp, fp
  1    0    0   1    1    1  0    0    0  	lw	fp, 20(sp)
  1    0    0   0    0    0  0    0    0  	addiu	sp, sp, 24
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	# Para volver al sistema operativo cargamos un cï¿½digo de retorno nulo.
  .    .    .   .    .    .  .    .    .  	#
  1    0    0   0    0    0  0    0    0  	move	v0, zero
  1    1    1   0    0    0  0    0    0  	jr	ra
  .    .    .   .    .    .  .    .    .  	.end	main
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	.rdata
  .    .    .   .    .    .  .    .    .  	.align	20
  .    .    .   .    .    .  .    .    .  aligned:
  .    .    .   .    .    .  .    .    .  	.skip	8192

--------------------------------------------------------------------------------
Ir  I1mr ILmr Dr  D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
514    6    6 102   27   27  2    2    2  events annotated

Si bien el analisis es muy similar al benchmark0-FullAssociative, su principal diferencia se encuentra en las instrucciones dentro del loop.
En el tag loop se puede ver que se obtienen 25 miss de lectura, esto se debe a que la instruccion lw se ejecuta 100 veces, y todas las veces "accede a memoria". Pero solo 25 accesos son reales a memoria, ya que al tener un tamano de bloque de 16B y cada palabra ocupa 4B, al realizar un acceso a memoria se trae el dato y los 3 subsiguientes a la cache (Principio de localidad), dando un total de 100 / 4 = 25 accesos a memoria.
Ademas, dado que en el loop se consultan 100 datos (100 lw), la cache tarde o temprano se va a llenar. Tenemos un tamano de cache de 64B, habra como maximo 16 words. Por lo tanto, al finalizar el loop, cualquier dato cargado anteriormente no va a estar mas. Debido a esto, en el ultimo lw el dato 20(sp) no se encuentra en cache, habiendo sido escrito previamente en el sw del comienzo del programa.
